// AI Chat Agent with Memory for Cloudflare Workers
const conversations = new Map();

export default {
  async fetch(request, env, ctx) {
    const url = new URL(request.url);
    
    if (request.method === 'OPTIONS') {
      return new Response(null, {
        headers: {
          'Access-Control-Allow-Origin': '*',
          'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
          'Access-Control-Allow-Headers': 'Content-Type'
        }
      });
    }
    
    // Chat API endpoint
    if (request.method === 'POST' && url.pathname === '/api/chat') {
      try {
        const { message, userId = 'default-user' } = await request.json();
        
        // Get conversation history
        let history = conversations.get(userId) || [];
        
        // Build messages for AI
        const messages = [
          { 
            role: 'system', 
            content: 'You are a helpful AI assistant. You have memory of our previous conversations in this session.' 
          },
          ...history,
          { role: 'user', content: message }
        ];
        
        // Call Cloudflare AI
        const response = await env.AI.run(
          '@cf/meta/llama-3-8b-instruct',
          { 
            messages: messages.slice(-10), // Last 10 messages for context
            max_tokens: 500 
          }
        );
        
        // Update conversation history
        history.push(
          { role: 'user', content: message },
          { role: 'assistant', content: response.response }
        );
        
        // Store history (keep last 20 messages)
        conversations.set(userId, history.slice(-20));
        
        return new Response(JSON.stringify({
          response: response.response,
          userId: userId
        }), {
          headers: { 
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
          }
        });
      } catch (error) {
        return new Response(JSON.stringify({ 
          error: 'Failed to process request',
          details: error.message 
        }), {
          status: 500,
          headers: { 'Content-Type': 'application/json' }
        });
      }
    }
    
    // Serve chat interface
    return new Response(getChatHTML(), {
      headers: { 'Content-Type': 'text/html' }
    });
  }
};

function getChatHTML() {
  return `<!DOCTYPE html>
<html>
<head>
    <title>AI Chat Assistant - Cloudflare Workers</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: system-ui, -apple-system, sans-serif;
            background: linear-gradient(to bottom right, #4F46E5, #7C3AED);
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }
        .container {
            background: white;
            border-radius: 20px;
            width: 100%;
            max-width: 500px;
            height: 600px;
            display: flex;
            flex-direction: column;
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
        }
        .header {
            padding: 20px;
            border-bottom: 1px solid #E5E7EB;
            background: #F9FAFB;
            border-radius: 20px 20px 0 0;
        }
        .header h1 {
            font-size: 24px;
            color: #111827;
        }
        .header p {
            color: #6B7280;
            font-size: 14px;
            margin-top: 4px;
        }
        #messages {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }
        .message {
            padding: 12px 16px;
            border-radius: 12px;
            max-width: 80%;
            word-wrap: break-word;
            animation: fadeIn 0.3s;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .user-message {
            align-self: flex-end;
            background: #4F46E5;
            color: white;
        }
        .ai-message {
            align-self: flex-start;
            background: #F3F4F6;
            color: #1F2937;
        }
        .input-area {
            padding: 20px;
            border-top: 1px solid #E5E7EB;
            display: flex;
            gap: 10px;
        }
        #input {
            flex: 1;
            padding: 12px;
            border: 1px solid #D1D5DB;
            border-radius: 10px;
            font-size: 16px;
            outline: none;
            transition: border-color 0.2s;
        }
        #input:focus {
            border-color: #4F46E5;
        }
        button {
            padding: 12px 24px;
            background: #4F46E5;
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-size: 16px;
            transition: background 0.2s;
        }
        button:hover:not(:disabled) {
            background: #4338CA;
        }
        button:disabled {
            background: #9CA3AF;
            cursor: not-allowed;
        }
        .loading {
            display: none;
            align-self: flex-start;
            padding: 12px 16px;
            background: #F3F4F6;
            border-radius: 12px;
            color: #6B7280;
        }
        .loading.show {
            display: block;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ðŸ¤– AI Assistant</h1>
            <p>Powered by Cloudflare Workers & Llama 3</p>
        </div>
        <div id="messages">
            <div class="message ai-message">
                Hello! I'm your AI assistant with memory. I'll remember our conversation. How can I help you today?
            </div>
        </div>
        <div class="loading" id="loading">AI is thinking...</div>
        <div class="input-area">
            <input 
                type="text" 
                id="input" 
                placeholder="Type your message..." 
                autofocus
            >
            <button onclick="sendMessage()" id="sendBtn">Send</button>
        </div>
    </div>

    <script>
        const userId = 'user-' + Math.random().toString(36).substr(2, 9);
        const messagesDiv = document.getElementById('messages');
        const input = document.getElementById('input');
        const loading = document.getElementById('loading');
        const sendBtn = document.getElementById('sendBtn');
        
        async function sendMessage() {
            const message = input.value.trim();
            if (!message) return;
            
            // Add user message
            addMessage(message, 'user');
            
            // Clear input and show loading
            input.value = '';
            sendBtn.disabled = true;
            loading.classList.add('show');
            
            try {
                const response = await fetch('/api/chat', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ message, userId })
                });
                
                const data = await response.json();
                
                if (data.error) {
                    addMessage('Sorry, something went wrong: ' + data.error, 'ai');
                } else {
                    addMessage(data.response, 'ai');
                }
            } catch (error) {
                addMessage('Sorry, I encountered an error. Please try again.', 'ai');
                console.error(error);
            } finally {
                loading.classList.remove('show');
                sendBtn.disabled = false;
                input.focus();
            }
        }
        
        function addMessage(text, sender) {
            const div = document.createElement('div');
            div.className = 'message ' + (sender === 'user' ? 'user-message' : 'ai-message');
            div.textContent = text;
            messagesDiv.insertBefore(div, loading);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }
        
        input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });
    </script>
</body>
</html>`;


